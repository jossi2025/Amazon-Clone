
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestor } from "firebase/firestore";

// Your web app's Firebase configuration

const firebaseConfig = {
  apiKey: import.meta.env.VITE_API_KEY,
  authDomain: import.meta.env.VITE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_MESSEGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_ID
};

// Initialize Firebase

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestor(app);






//   VITE_API_KEY = "AIzaSyAxrPWiuZgmUFbuhJjIXg0hrEDt7zbehpU",
//   VITE_AUTH_DOMAIN = "clone-6b378.firebaseapp.com",
//  VITE_PROJECT_ID = "clone-6b378",
//  VITE_STORAGE_BUCKET = "clone-6b378.firebasestorage.app",
//  VITE_MESSAGING_SENDER_ID = "758589816851",
//  VITE_APP_ID =  "1:758589816851:web:c72c1507d493cbb161bfe6"




secret key

STRIP_KEY=sk_test_51QyEOK3jcTM1kPSchIaSkupeM7kVD4neuGWpIqcvUYqaTwlVQLu2NXO8MEhayQe0jRpx7PNdE2Fry7RtiN07mnDw00bWEWC6An








// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";


// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAxrPWiuZgmUFbuhJjIXg0hrEDt7zbehpU",
  authDomain: "clone-6b378.firebaseapp.com",
  projectId: "clone-6b378",
  storageBucket: "clone-6b378.firebasestorage.app",
  messagingSenderId: "758589816851",
  appId: "1:758589816851:web:c72c1507d493cbb161bfe6"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);



{clientsecret: 'pi_3QzLdP3jcTM1kPSc1977yy0n_secret_woR93boRr2rKAeB1S50KqBmYr'}


{
    "clientSecret": "pi_3QzLzB3jcTM1kPSc1eaxpiLT_secret_QeeecWRXvOmKRvCQH2tWKvjB

















import React, { useContext, useState } from "react";
import classes from "./Payment.module.css";
import LayOut from "../../Components/LayOut/LayOut";
import { DataContext } from "../../Components/DataProvider/DataProvider";
import ProductCard from "../../Components/Product/ProductCard";
import { useStripe, useElements, CardElement } from "@stripe/react-stripe-js";
import CurrencyFormat from "../../Components/CurrencyFormat/CurrencyFormat";
import { axiosInstance } from "../../Api/axios";
import { ClipLoader } from "react-spinners";
import { db } from "../../Utility/firebase";
import { useNavigate } from "react-router-dom";
import { Type } from "../../Utility/action.type";

function Payment() {
  const [{ user, basket }, dispatch] = useContext(DataContext);
  const totalItem = basket.reduce((amount, item) => {
    return item.amount + amount;
  }, 0);
  const total = basket.reduce((amount, item) => {
    return item.price * item.amount + amount;
  }, 0);

  const [cardError, setCardError] = useState(null);
  const [processing, setProcessing] = useState(false);

  const stripe = useStripe();
  const elements = useElements();
  const navigate = useNavigate();

  const handleChange = (e) => {
    // console.log(e)
    e?.error?.message ? setCardError(e.error?.message) : setCardError("");
  };

  const handlePayment = async (e) => {
    e.preventDefault();

    try {
      setProcessing(true);
      //  1.
      // backen || functions   contact to the client  secret
      const response = await axiosInstance({
        method: "POST",
        url: `payment/create?total=${total * 100}`,
      });

      // console.log(response.data);
      const clientSecret = response.data?.clientSecret;
      // 2.client side (react side confirmation)
      const { paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
        },
      });

      // console.log(paymentIntent);

      // 3. after that confitmation ---ordr firestor  database save, clear basket

      await db
        .collection("users")
        .doc(user.uid)
        .collection("orders")
        .doc(paymentIntent.id)
        .set({
          basket: basket,
          amount: paymentIntent.amount,
          created: paymentIntent.created,
        });
      // empy the basket //
      dispatch({ type: Type.EMPTY_BASKET });
      
      setProcessing(false);
      navigate("/order", { state: { msg: "you have placed new order" } });
    } catch (error) {
      console.log(error);
      
      setProcessing(false);
    }
  };

  return (
    <LayOut>
      {/* header */}
      <div className={classes.Payment__header}>
        checkout ({totalItem}) items
      </div>

      {/* payment method */}
      <section className={classes.Payment}>
        {/* address */}
        <div className={classes.flex}>
          <h3>Delivery Address</h3>
          <div>
            <div>{user?.email}</div>
            <div>123 React line</div>
            <div>Chicago, IL</div>
          </div>
        </div>
        <hr />
        {/* product */}
        <div className={classes.flex}>
          <h3>Review item and delivery</h3>
          <div>
            {basket?.map((item, i) => (
              <ProductCard key={i} product={item} flex={true} />
            ))}
          </div>
        </div>
        <hr />

        {/* card form */}
        <div className={classes.flex}>
          <h3>Payment methods</h3>
          <div className={classes.Payment__card__container}>
            <div className={classes.Payment__details}>
              <form onSubmit={handlePayment}>
                {/* error */}
                {cardError && (
                  <small style={{ color: "darkred" }}>{cardError}</small>
                )}
                {/* card element */}
                <CardElement onChange={handleChange} />

                {/* price */}
                <div className={classes.Payment__price}>
                  <div>
                    <span style={{ display: "flex", gap: "10px" }}>
                      Total Order | <CurrencyFormat amount={total} />
                    </span>
                  </div>
                  <button type="submit">
                    {processing ? (
                      <div className={classes.loading}>
                        <ClipLoader color="gray" size={21} />
                        <p>Please wait ...</p>
                      </div>
                    ) : (
                      "Pay Now"
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </section>
    </LayOut>
  );
}

export default Payment;
